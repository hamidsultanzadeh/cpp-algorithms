/* 
 * File:   knapsack_recursive.cpp
 * Author: hamidsultanzadeh
 *
 * Created on September 24, 2019, 3:56 PM
 */

#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

int knapSack(int pointer, int W, int weight[], int value[]){
    
    //Eger pointer sona catibsa ve ya bosh yer yoxdursa geriye sifir donur
    //Algoritm bitir
    
    if(pointer==0 || W==0){
        return 0; // son
    }
    
    if(weight[pointer-1]>W){
        return knapSack(pointer-1,W,weight,value);
    } else {
        
        int val_1 = value[pointer-1] + knapSack(pointer,W-weight[pointer-1],weight,value);
        int val_2 = knapSack(pointer-1,W,weight,value);
        
        int result = max(val_1,val_2);
        
        return result ;
    }
      
}

int main(int argc, char** argv) {
    
    ios::sync_with_stdio(0);
    cin.tie(0);

    int value[] = {60, 100, 120};  
    int weight[] = {10, 20, 30};  
    int W = 50;  
    int pointer = sizeof(value)/sizeof(value[0]); 
    
    
    cout<<knapSack(pointer,W,weight,value);  
    
    
    return 0;
}