/* 
 * File:   dfs_depth_first_search.cpp
 * Author: hamidsultanzadeh
 *
 * Created on October 10, 2019, 6:20 PM
 */

#include <iostream>
#include <list>
#include <stack>
using namespace std;

class Graph{
    
    int V;
    
    list<int> *adj;
    
    void DFSUtil(int v, bool visited[]);
    
public:
    
    Graph(int V);
    
    void addEdge(int v,int w);
    
    void DFS(int v);
    
    void DFSIterator(int v);
    
};

Graph::Graph(int V){
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w){
    
    adj[v].push_back(w);    
}

void Graph::DFSUtil(int v, bool visited[]){
    
    visited[v] = true; // duuyume chatdi
    
    cout << v << " "; 
    
    list<int>::iterator it;
    
    for(it = adj[v].begin() ; it!=adj[v].end() ; it++){
        if(!visited[*it]){
            DFSUtil(*it,visited);
        }
    }
}

void Graph::DFS(int v){
    
    bool *visited = new bool[V];
    for(int i=0 ; i<V ; i++){
        visited[i] = false;
    }
    
    DFSUtil(v,visited);
    
}



void Graph::DFSIterator(int v){
    
    bool *visited = new bool[V];
    for(int i=0 ; i<V ; i++){
        visited[i] = false;
    }
    
    stack<int> stck;
    
    stck.push(v);
       
    while(!stck.empty()){
        
        v = stck.top();
        stck.pop();
        
        if(!visited[v]){
            cout<< v << " ";
            visited[v] = true;
        }
                    
        for(auto it = adj[v].begin() ; it!=adj[v].end() ; it++){
            
            if(!visited[*it]){
                stck.push((*it));
            }
            
        }
        
    }
       
}

int main(int argc, char** argv) {
    
    //v - bashlangic duyum
    //V - duymlerin sayi
    
    Graph g(5); // duymleri sayi qeder bool array yaradiriq
    g.addEdge(0, 1); 
    g.addEdge(0, 2); 
    g.addEdge(0, 3); 
    g.addEdge(2, 4);
  
    cout << "Following is Depth First Traversal"<<endl; 
    g.DFS(0); //  baslangic duyumu qeyd edirik
    cout<<"\n";
    g.DFSIterator(0);
    

    return 0;
}
